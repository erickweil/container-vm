#include: '/templates/padrao.template.yml'
include: 'https://gitlab.fslab.dev/fslab/modelo-ci-cd/-/raw/master/templates/padrao.template.yml'

variables:
  IMG_BASE: registry.fslab.dev/erickweil/container-vm
  # https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#make-docker-in-docker-builds-faster-with-docker-layer-caching
  DOCKER_DRIVER: overlay2

stages:
  - debug
  - publish1
  - publish2
  - publish3
  - test

debug:
  image: erickweil/mydocker:dind
  extends: 
    - .on-commit-main
  # - .disable-git-clone
  needs: []
  stage: debug
  variables:
    BUILD_TAG: $IMG_BASE:code
  script:
    - ls -lhas . ./docker-vm
    - echo "Nome da imagem"
    - echo $IMG_BASE
    - echo "Default branch:"
    - echo $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - echo "Testando questão do docker artifact"
    - docker images
    - docker system df
    #- docker pull ubuntu || true
    #- ls -lhas /var/lib/docker

.mybuild-docker:
  image: erickweil/mydocker:dind
  variables:
    BUILD_DIR: "."
    BUILD_DOCKERFILE: "Dockerfile"
    BUILD_TAG: $CI_REGISTRY/$GITLAB_USER_LOGIN/$CI_PROJECT_NAME:latest
    BUILD_ARG: ""
  script:
    - cd $BUILD_DIR
    - echo "Realizando o build da imagem $BUILD_TAG no diretório $BUILD_DIR"

    # fetches the latest image (not failing if image is not found)
    - docker pull $BUILD_TAG || true
    # builds the project, passing proxy variables, using OCI labels
    # notice the cache-from, which is going to use the image we just pulled locally
    # the built image is tagged locally with the commit SHA, and then pushed to 
    # the GitLab registry
    - >
      docker build
      --pull
      --cache-from $BUILD_TAG
      --label "org.opencontainers.image.title=$CI_PROJECT_TITLE"
      --label "org.opencontainers.image.url=$CI_PROJECT_URL"
      --label "org.opencontainers.image.created=$CI_JOB_STARTED_AT"
      --label "org.opencontainers.image.revision=$CI_COMMIT_SHA"
      --label "org.opencontainers.image.version=$CI_COMMIT_REF_NAME"
      --tag $BUILD_TAG
      --build-arg="$BUILD_ARG"
      -f $BUILD_DOCKERFILE
      .
    - docker push "$BUILD_TAG"

build-code:
  extends: 
    - .on-commit-main
    - .mybuild-docker
  needs: ["debug"]
  stage: publish1
  variables:
    BUILD_DIR: "./docker-vm"
    BUILD_TAG: $IMG_BASE:code
    BUILD_DOCKERFILE: Dockerfile
    BUILD_ARG: "INSTALL_PROGRAMS=locale code"

build-programs:
  extends: 
    - .on-commit-main
    - .mybuild-docker
  needs: ["build-code"]
  stage: publish2
  variables:
    BUILD_DIR: "./docker-vm"
    BUILD_TAG: $IMG_BASE:programs
    BUILD_DOCKERFILE: Dockerfile.programs
    BUILD_ARG: "INSTALL_PROGRAMS=locale code docker php-nginx ssh node python java kubectl mariadb-client"
  before_script:
  # Renomear a imagem FROM no Dockerfile
    - sed -i -e "s#^FROM.*\$#FROM $IMG_BASE:code#g" ./docker-vm/Dockerfile.programs

build-extensions:
  extends: 
    - .on-commit-main
    - .mybuild-docker
  needs: ["build-programs"]
  stage: publish3
  variables:
    BUILD_DIR: "./docker-vm"
    BUILD_TAG: $IMG_BASE:complete
    BUILD_DOCKERFILE: Dockerfile.extensions
    BUILD_ARG: "INSTALL_VSCODE_EXTENSIONS=vscjava.vscode-java-pack dbaeumer.vscode-eslint ms-kubernetes-tools.vscode-kubernetes-tools"
  before_script:
  # Renomear a imagem FROM no Dockerfile
    - sed -i -e "s#^FROM.*\$#FROM $IMG_BASE:programs#g" ./docker-vm/Dockerfile.extensions

test:
  image: erickweil/mydocker:dind
  extends: .on-commit-main
  needs: ["build-extensions"]
  stage: test
  variables:
    BUILD_TAG: $IMG_BASE:complete
  script:
    - echo "Vendo se o container inicia"
    - cd ./docker-vm
    - docker network create net-vm
    - bash ./novo_container.sh joao 12345678 8080 22
    - sleep 10
    - docker ps -a
    - docker logs joao
    - docker exec joao bash -c "ls -lhas /home/ /home/joao /home/joao/Desktop /home/joao/.local/share/code-server /opt"
    - docker exec joao bash -c "docker ps && python --version && node -v && java -version"
    - docker exec joao bash -c "systemctl status --no-pager"
    - curl -fsSL http://localhost:80
    - curl -fsSL http://localhost:8080
    - docker rm -f joao

# Depois

# Usar cypress para entrar pela UI e instalar as extensões do vscode, deixar modo escuro, etc... de forma automática

# https://medium.com/@hfally/a-gitlab-ci-config-to-deploy-to-your-server-via-ssh-43bf3cf93775